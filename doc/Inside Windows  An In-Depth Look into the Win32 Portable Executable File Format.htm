<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0054)http://msdn.microsoft.com/en-us/magazine/cc301805.aspx -->
<html xmlns="http://www.w3.org/1999/xhtml" style="" overflow:auto""=""><head id="ctl00_Head"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><link id="ctl00_HeaderLink2" rel="stylesheet" type="text/css" href="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/Msdn10a-bn1651.css"><link id="ctl00_HeaderLink3" rel="stylesheet" type="text/css" href="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/Magazine2-bn1651.css"><link rel="alternate" type="application/rss+xml" title="MSDN Magazine - Current Issue" href="http://msdn.microsoft.com/magazine/rss/default.aspx?z=z&iss=1"><link rel="alternate" type="application/rss+xml" title="MSDN Magazine - Complete" href="http://msdn.microsoft.com/magazine/rss/default.aspx?z=z&all=1"><link rel="alternate" type="application/rss+xml" title="MSDN Magazine Blog" href="http://blogs.msdn.com/msdnmagazine/rss.xml"><meta name="NormalizedUrl" content="http://msdn.microsoft.com/en-us/magazine(d=default)/cc301805(l=en-us,v=MSDN.10).aspx"><meta name="VotingContextUrl" content="http://msdn.microsoft.com/en-us/magazine(d=default)/cc301805(l=en-us,v=MSDN.10).aspx"><meta name="ROBOTS" content="NOINDEX,NOFOLLOW"><meta name="MN" content="BF1CA93C-4:30:38 AM"><meta name="ms.locale" content="en-us"><meta name="Search.ShortId" content="cc301805">
<!-- Looking for metadata? Use the robot view instead http://currentsite/currenturl(robot).aspx -->
<link rel="stylesheet" type="text/css" href="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/mtps-bn1651.css"><link rel="alternate" media="print" href="http://msdn.microsoft.com/en-us/magazine/cc301805(printer).aspx">
<title>
	Inside Windows: An In-Depth Look into the Win32 Portable Executable File Format
</title></head>
<body id="ctl00_MTPS_Body" class="MsdnPageBody" dir="ltr">
    <form name="aspnetForm" method="post" action="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format.htm" id="aspnetForm">
<div>
<input type="hidden" name="__EVENTTARGET" id="__EVENTTARGET" value="">
<input type="hidden" name="__EVENTARGUMENT" id="__EVENTARGUMENT" value="">
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="/wEPDwUBMGQYAQUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFgEFImN0bDAwJE1hc3RoZWFkJFNlYXJjaCRTZWFyY2hCdXR0b24lmakQCE49nay/Oh+qSjeDZiRv+Q==">
</div>

<script type="text/javascript" async="" src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/ms2.js"></script><script type="text/javascript">
//<![CDATA[
var theForm = document.forms['aspnetForm'];
if (!theForm) {
    theForm = document.aspnetForm;
}
function __doPostBack(eventTarget, eventArgument) {
    if (!theForm.onsubmit || (theForm.onsubmit() != false)) {
        theForm.__EVENTTARGET.value = eventTarget;
        theForm.__EVENTARGUMENT.value = eventArgument;
        theForm.submit();
    }
}
//]]>
</script>


<script src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/WebResource.axd" type="text/javascript"></script>


<script type="text/javascript">
//<![CDATA[
var CurUserId="";var ClientURL="http%3a%2f%2fmsdn.microsoft.com%2fen-us%2fmagazine(d%3ddefault)%2fcc301805(l%3den-us%2cv%3dMSDN.10).aspx";var maxRating=5;var RatingObjId="ctl00_tb1_Flyout_Rating1";var tbCommentsId="ctl00_tb1_Flyout_tbComments";var PageId="cc301805";var pageTag="contentRatingcc301805MSDN.10en-us";var sendBtnId="ctl00_tb1_Flyout_btnSend";var curRating="4";var contentRated=false;var RatingTooltipText="Click a star and provide feedback";var RatedTooltipText="You have already rated this content. Thank you for your feedback.";var userIPAddress="5.22.135.70";var MtpsPageDirection="ltr";var RatingFlyoutID="ctl00_tb1_Flyout";var Rating_Device="default";//]]>
</script>

<script src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/jquery-1.2.6-bn1651.js" type="text/javascript"></script>
<script src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/Silverlight-bn1651.js" type="text/javascript"></script>
<script type="text/javascript">
//<![CDATA[
var wt_nvr_ru = "WT_NVR_RU";var wt_fpcdom = ".microsoft.com";var wt_domlist = "msdn.microsoft.com";var wt_pathlist = "";var wt_paramlist = "DCSext.mtps_devcenter";var wt_siteid = "MSDN";var gDomain="m.webtrends.com";
var gDcsId="dcsmgru7m99k7mqmgrhudo0k8_8c6m";
var gFpc="WT_FPC";
/*<![CDATA[*/
if(document.cookie.indexOf(gFpc+"=")==-1){document.write("<scr"+"ipt type='text/javascript' src='"+"http"+(window.location.protocol.indexOf('https:')==0?'s':'')+"://"+gDomain+"/"+gDcsId+"/wtid.js"+"'><\/scr"+"ipt>");}
/*]]>*/
var detectedLocale = 'en-us';
var wtsp="_msdnmag_";
var gTrackEvents = 1;
var omni_guid='215e1adf-c353-4ef4-bd82-f29e273101bd';//]]>
</script>
<script src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/omni_rsid_msdn-bn1651.js" type="text/javascript"></script><noscript>&lt;a href='http://www.omniture.com' title='Web Analytics'&gt;&lt;img src='http://msstonojsmsdn.112.2o7.net/b/ss/msstonojsmsdn/1/H.20.2--NS/0'  height='1' width='1' border='0' alt='' /&gt;&lt;/a&gt;</noscript>
<script type="text/javascript">
//<![CDATA[
$(document).ready(function() { var sf = "a[@rel$='sitefeedback']"; if ($(sf) == null) return;  $(sf).click(function() {   var t = $(this).attr('targetUrl');   window.open(t,'SiteFeedback','width=670,resizable=no,height=700,toolbar=no,location=no,scrollbars=yes,directories=no,status=no,menubar=no'); return false; }); });//]]>
</script>

<script src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/compositejscript3.js" type="text/javascript"></script>
<div>

	<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="42B7A491">
</div>
    <script type="text/javascript">
//<![CDATA[
Sys.WebForms.PageRequestManager._initialize('ctl00$ScriptManager1', 'aspnetForm', [], [], [], 90, 'ctl00');
//]]>
</script>

    <div id="ctl00_checkFlyer">

</div>
    
    
    <div id="BodyBackground">
        <div id="ctl00_JelloSizer" class="JelloSizer">
            <div id="JelloExpander">
                <div id="ctl00_JelloWrapper" class="JelloWrapper">
                    <div class="Clear"> </div>
                    
                        <div class="Clear"> </div>
                        

<div class="Masthead">
    <div id="ctl00_Masthead_brandLogo" class="BrandLogo">
        <a href="http://msdn.microsoft.com/en-us/magazine/default.aspx" id="ctl00_Masthead_brandlink" title="MSDN Magazine">MSDN Magazine</a>
    </div>
    <div class="Search">
        <div id="ctl00_Masthead_Search_SearchBox" class="SearchBox">
    <input name="ctl00$Masthead$Search$SearchTextBox" type="text" id="ctl00_Masthead_Search_SearchTextBox" title="Search MSDN Magazine with Bing" class="TextBoxSearch" autocomplete="off" style="color: rgb(170, 170, 170); font-style: italic;">
    <input type="image" name="ctl00$Masthead$Search$SearchButton" id="ctl00_Masthead_Search_SearchButton" title="Search MSDN Magazine with Bing" class="SearchButton" alt="Click here to search" src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/clear.gif" style="border-width:0px;">
    <span class="Bing"></span>
<script type="text/javascript" defer="defer" src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/SearchBox.jss" id="mscom.srch.searchBox"></script><div id="SearchFlyoutContainer" style="display: none; text-align: left; border: 1px solid buttonshadow; position: absolute; z-index: 1000; padding: 2px; color: rgb(0, 0, 0); font-family: Arial; font-size: 13px; background-color: rgb(255, 255, 255);"><div id="SuggestionContainer"><ul style="list-style: none; padding: 4px 2px 0px 1px; cursor: pointer; margin: 1px; white-space: nowrap;"></ul></div></div></div>
    </div>
    <div class="GlobalBar">
        <div id="ctl00_Masthead_passportScarab" class="PassportScarab"> 
            <a id="idPPScarab" href="https://login.live.com/login.srf?wa=wsignin1.0&rpsnv=12&ct=1403436638&rver=6.0.5276.0&wp=MCLBI&wlcxt=msdn%24msdn%24msdn&wreply=http%3a%2f%2fmsdn.microsoft.com%2fen-us%2fmagazine%2fcc301805.aspx&lc=1033&id=254354&mkt=en-US"><span id="idPPScarabSIT" class="MTPS_GlobalToolbarLinks_msdn">Sign in</span></a>
<div id="idPPMWOverlay" style="display: none;"></div>
        </div>
        <div class="LocaleFlyout">
            
    <div id="MainDiv" onmouseover="FlyoutPopupShow()" onmouseout="FlyoutPopupHide()">
        <div id="FlyoutTop">
            <a id="ctl00_Masthead_LocaleManagement_linkCountryLanguage" class="LocaleManagementFlyoutStaticLink">United States - English&nbsp;</a>
            <img id="img_Arrow" class="LocaleManagementFlyoutPopArrow" src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/clear.gif" alt="choose your country or language">
        </div>
        <div id="FlyoutPopup" class="LocaleManagementFlyoutPopup" style="display: none;">
            <table class="LocaleManagementFlyoutPopupTable">
                <tbody><tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_Arg" href="javascript:__doPostBack('ctl00$Masthead$LocaleManagement$lkbtn_Arg','')">
                Argentina (Español)</a></td></tr>
                <tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_Bra" href="javascript:__doPostBack('ctl00$Masthead$LocaleManagement$lkbtn_Bra','')">
                Brasil (Português)</a></td></tr>
                <tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_CanE" href="javascript:__doPostBack('ctl00$Masthead$LocaleManagement$lkbtn_CanE','')">
                Canada (English)</a></td></tr>
                <tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_CanF" href="javascript:__doPostBack('ctl00$Masthead$LocaleManagement$lkbtn_CanF','')">
                Canada (Français)</a></td></tr>
                <tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_Chi" href="javascript:__doPostBack('ctl00$Masthead$LocaleManagement$lkbtn_Chi','')">
                中国 (简体中文)</a></td></tr>
                <tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_Col" href="javascript:__doPostBack('ctl00$Masthead$LocaleManagement$lkbtn_Col','')">
                Colombia (Español)</a></td></tr>
                <tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_Deu" href="javascript:__doPostBack('ctl00$Masthead$LocaleManagement$lkbtn_Deu','')">
                Deutschland (Deutsch)</a></td></tr>
                <tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_Esp" href="javascript:__doPostBack('ctl00$Masthead$LocaleManagement$lkbtn_Esp','')">
                España (Español)</a></td></tr>
                <tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_Fra" href="javascript:__doPostBack('ctl00$Masthead$LocaleManagement$lkbtn_Fra','')">
                France (Français)</a></td></tr>
                <tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_Ind" href="javascript:__doPostBack('ctl00$Masthead$LocaleManagement$lkbtn_Ind','')">
                India (English)</a></td></tr>
                <tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_Ita" href="javascript:__doPostBack('ctl00$Masthead$LocaleManagement$lkbtn_Ita','')">
                Italia (Italiano)</a></td></tr>
                <tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_Jpa" href="javascript:__doPostBack('ctl00$Masthead$LocaleManagement$lkbtn_Jpa','')">
                日本 (日本語)</a></td></tr>
                <tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_Kor" href="javascript:__doPostBack('ctl00$Masthead$LocaleManagement$lkbtn_Kor','')">
                한국 (한국어)</a></td></tr>
                <tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_Mex" href="javascript:__doPostBack('ctl00$Masthead$LocaleManagement$lkbtn_Mex','')">
                México (Español)</a></td></tr>
                <tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_Per" href="javascript:__doPostBack('ctl00$Masthead$LocaleManagement$lkbtn_Per','')">
                Perú (Español)</a></td></tr>
                <tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_Рос" href="javascript:__doPostBack('ctl00$Masthead$LocaleManagement$lkbtn_Рос','')">
                Россия (Pусский)</a></td></tr>
                <tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_Tai" href="javascript:__doPostBack('ctl00$Masthead$LocaleManagement$lkbtn_Tai','')">
                台灣 (繁體中文)</a></td></tr>
                <tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_UK" href="javascript:__doPostBack('ctl00$Masthead$LocaleManagement$lkbtn_UK','')">
                United Kingdom (English)</a></td></tr>
                <tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_US" href="javascript:__doPostBack('ctl00$Masthead$LocaleManagement$lkbtn_US','')">
                United States (English)</a></td></tr>
                <tr><td class="LocaleManagementFlyoutPopupHr"></td></tr>
                <tr><td><a id="ctl00_Masthead_LocaleManagement_lkbtn_More" href="http://msdn.microsoft.com/en-us/selectLocale">More...</a></td></tr>
            </tbody></table>
        </div>
    </div>


        </div>
        <div class="Clear"></div>
        <div id="ctl00_Masthead_ProfileLink_UserName" class="UserName"></div>
    </div>
    <div class="Clear"></div>
    <div id="ctl00_Masthead_networkTagLineArea" class="NetworkLogo">
        <a href="http://msdn.microsoft.com/en-us/default.aspx" id="ctl00_Masthead_networkLink"><img title="microsoft developer network" src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/brand_logo.png" style="border-width:0px;"></a>
    </div>
    

<div class="leftcap"></div>
    <div class="internav">
	    <div id="ctl00_Masthead_tabs_manTabsHolder"><a id="ctl00_Masthead_tabs_ctl01" class="normal" href="http://msdn.microsoft.com/en-us/magazine/default.aspx" onclick="javascript:Track(&#39;|TabStrip Link|ctl00_Masthead_tabs_ctl00|ctl00_Masthead_tabs_ctl01&#39;,this);">Home</a><a id="ctl00_Masthead_tabs_ctl03" class="normal" href="http://msdn.microsoft.com/en-us/magazine/ee532082.aspx" onclick="javascript:Track(&#39;|TabStrip Link|ctl00_Masthead_tabs_ctl02|ctl00_Masthead_tabs_ctl03&#39;,this);">Topics</a><a id="ctl00_Masthead_tabs_ctl05" class="active" href="http://msdn.microsoft.com/en-us/magazine/ee310108.aspx" onclick="javascript:Track(&#39;|TabStrip Link|ctl00_Masthead_tabs_ctl04|ctl00_Masthead_tabs_ctl05&#39;,this);">Issues and Downloads</a><a id="ctl00_Masthead_tabs_ctl07" class="normal" href="http://msdn.microsoft.com/en-us/magazine/ee729207.aspx" onclick="javascript:Track(&#39;|TabStrip Link|ctl00_Masthead_tabs_ctl06|ctl00_Masthead_tabs_ctl07&#39;,this);">Script Junkie</a><a id="ctl00_Masthead_tabs_ctl09" class="normal" href="http://msdn.microsoft.com/en-us/magazine/ee358702.aspx" onclick="javascript:Track(&#39;|TabStrip Link|ctl00_Masthead_tabs_ctl08|ctl00_Masthead_tabs_ctl09&#39;,this);">Subscribe</a><a id="ctl00_Masthead_tabs_ctl11" class="normal" href="http://msdn.microsoft.com/en-us/magazine/ee291618.aspx" onclick="javascript:Track(&#39;|TabStrip Link|ctl00_Masthead_tabs_ctl10|ctl00_Masthead_tabs_ctl11&#39;,this);">Submit an Article</a><a id="ctl00_Masthead_tabs_ctl13" class="normal" href="http://msdn.microsoft.com/en-us/magazine/cc194384.aspx" onclick="javascript:Track(&#39;|TabStrip Link|ctl00_Masthead_tabs_ctl12|ctl00_Masthead_tabs_ctl13&#39;,this);">RSS</a></div>
    </div>
<div class="rightcap"></div>
<div class="Clear"></div>
   
</div>
                        <div class="Clear"> </div>
                        <div class="topleftcorner"> </div>
                        <div class="toprightcorner"> </div>
                        <div class="alley">
                            <div class="wrapper">
                                <div class="inner">
                                    
                                    <div class="Clear"> </div>
                                    <div id="ctl00_EyebrowMenu_EyebrowContainer" class="EyebrowContainer"><a id="ctl00_EyebrowMenu_ctl00" title="MSDN Magazine" class="EyebrowLink" href="http://msdn.microsoft.com/en-us/magazine/dd767791.aspx" onclick="javascript:Track(&#39;|Eyebrow|ctl00_EyebrowMenu_EyebrowContainer|ctl00_EyebrowMenu_ctl00&#39;,this);">MSDN Magazine</a><span>&nbsp;&gt;&nbsp;</span><a id="ctl00_EyebrowMenu_ctl01" title="Issues and Downloads" class="EyebrowLink" href="http://msdn.microsoft.com/en-us/magazine/ee310108.aspx" onclick="javascript:Track(&#39;|Eyebrow|ctl00_EyebrowMenu_EyebrowContainer|ctl00_EyebrowMenu_ctl01&#39;,this);">Issues and Downloads</a><span>&nbsp;&gt;&nbsp;</span><a id="ctl00_EyebrowMenu_ctl02" title="2002" class="EyebrowLink" href="http://msdn.microsoft.com/en-us/magazine/cc135859.aspx" onclick="javascript:Track(&#39;|Eyebrow|ctl00_EyebrowMenu_EyebrowContainer|ctl00_EyebrowMenu_ctl02&#39;,this);">2002</a><span>&nbsp;&gt;&nbsp;</span><a id="ctl00_EyebrowMenu_ctl03" title="February" class="EyebrowLink" href="http://msdn.microsoft.com/en-us/magazine/cc135800.aspx" onclick="javascript:Track(&#39;|Eyebrow|ctl00_EyebrowMenu_EyebrowContainer|ctl00_EyebrowMenu_ctl03&#39;,this);">February</a><span>&nbsp;&gt;&nbsp;</span><span class="EyebrowElement">&nbsp;Inside Windows: An In-Depth Look into the Win32...</span></div>
                                    <div class="Clear"> </div>
                                    <table border="0" cellpadding="0" cellspacing="0" width="100%" style="width: 100%; table-layout: fixed;">
                                        <tbody><tr>
                                            <td style="vertical-align: top; width: auto;" valign="top">
                                                
                                                <div id="MainContent" style="width: 100%">
                                                    <span id="ctl00_altSelector"></span>
                                                            
                                                            <div class="topic">
                              <div class="majorTitle" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
                                        <!---->
                              </div>
                              <div class="title" xmlns:msxsl="urn:schemas-microsoft-com:xslt">From the February 2002 issue of MSDN Magazine</div>
                              <!--Content type: HTML. Transform: msdneditorial2mtps.xslt.-->
                              <img alt="MSDN Magazine" src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/Cc301805.mmlogosm(en-us,MSDN.10).gif">
                              <table>
                                        <tbody><tr>
                                                  <td>
                                                            <h3>Inside Windows</h3>
                                                            <h1>An In-Depth Look into the Win32 Portable Executable File Format</h1>
                                                  </td>
                                        </tr>
                                        <tr>
                                                  <td>
                                                            <span class="pd">Matt Pietrek</span>
                                                  </td>
                                        </tr>
                                        <tr>
                                                  <td>
                                                            <span class="clsInfo">This article assumes you're familiar with C++ and Win32</span>
                                                  </td>
                                        </tr>
                                        <tr>
                                                  <td>
                                                            <span class="clsLevel">
                                                                      <span>Level of Difficulty&nbsp; &nbsp;&nbsp;</span>
                                                                      <span>1</span>&nbsp;&nbsp; <span>2</span>&nbsp;&nbsp; <span>3</span>&nbsp;</span>
                                                  </td>
                                        </tr>
                                        <tr>
                                                  <td>
                                                            <span class="CodeDownloadText">Code download available from the <a href="http://code.msdn.microsoft.com/mag200202Windows">MSDN Code Gallery</a></span>
                                                  </td>
                                        </tr>
                                        <tr>
                                                  <td>
                                                            <p>
                                                                      <strong>SUMMARY</strong> A good understanding of the Portable Executable (PE) file format leads to a good understanding of the operating system. If you know what's in your DLLs and EXEs, you'll be a more knowledgeable programmer. This article, the first of a two-part series, looks at the changes to the PE format that have occurred over the last few years, along with an overview of the format itself.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;After this update, the author discusses how the PE format fits into applications written for .NET, PE file sections, RVAs, the DataDirectory, and the importing of functions. An appendix includes lists of the relevant image header structures and their descriptions.</p>
                                                  </td>
                                        </tr>
                                        <tr>
                                                  <td class="articletext">
                                                            <img height="63" alt="A" src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/Cc301805.a(en-us,MSDN.10).gif"> long time ago, in a galaxy far away, I wrote one of my first articles for <em>Microsoft Systems Journal</em> (now <em>MSDN</em>® <em>Magazine</em>). The article, "<a id="ctl00_MTContentSelector1_mainContentContainer_ctl01" href="http://msdn.microsoft.com/en-us/magazine/ms809762.aspx" onclick="javascript:Track(&#39;ctl00_MTContentSelector1_mainContentContainer_ctl00|ctl00_MTContentSelector1_mainContentContainer_ctl01&#39;,this);">Peering Inside the PE: A Tour of the Win32 Portable Executable File Format</a>," turned out to be more popular than I had expected. To this day, I still hear from people (even within Microsoft) who use that article, which is still available from the MSDN Library. Unfortunately, the problem with articles is that they're static. The world of Win32® has changed quite a bit in the intervening years, and the article is severely dated. I'll remedy that situation in a two-part article starting this month.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;You might be wondering why you should care about the executable file format. The answer is the same now as it was then: an operating system's executable format and data structures reveal quite a bit about the underlying operating system. By understanding what's in your EXEs and DLLs, you'll find that you've become a better programmer all around.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sure, you could learn a lot of what I'll tell you by reading the Microsoft specification. However, like most specs, it sacrifices readability for completeness. My focus in this article will be to explain the most relevant parts of the story, while filling in the hows and whys that don't fit neatly into a formal specification. In addition, I have some goodies in this article that don't seem to appear in any official Microsoft documentation.<br><br><h3>Bridging the Gap</h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Let me give you just a few examples of what has changed since I wrote the article in 1994. Since 16-bit Windows® is history, there's no need to compare and contrast the format to the Win16 New Executable format. Another welcome departure from the scene is Win32s®. This was the abomination that ran Win32 binaries very shakily atop Windows 3.1.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Back then, Windows 95 (codenamed "Chicago" at the time) wasn't even released. Windows NT® was still at version 3.5, and the linker gurus at Microsoft hadn't yet started getting aggressive with their optimizations. However, there were MIPS and DEC Alpha implementations of Windows NT that added to the story.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;And what about all the new things that have come along since that article? 64-bit Windows introduces its own variation of the Portable Executable (PE) format. Windows CE adds all sorts of new processor types. Optimizations such as delay loading of DLLs, section merging, and binding were still over the horizon. There are many new things to shoehorn into the story.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;And let's not forget about Microsoft® .NET. Where does it fit in? To the operating system, .NET executables are just plain old Win32 executable files. However, the .NET runtime recognizes data within these executable files as the metadata and intermediate language that are so central to .NET. In this article, I'll knock on the door of the .NET metadata format, but save a thorough survey of its full splendor for a subsequent article.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;And if all these additions and subtractions to the world of Win32 weren't enough justification to remake the article with modern day special effects, there are also errors in the original piece that make me cringe. For example, my description of Thread Local Storage (TLS) support was way out in left field. Likewise, my description of the date/time stamp DWORD used throughout the file format is accurate only if you live in the Pacific time zone!<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;In addition, many things that were true then are incorrect now. I had stated that the .rdata section wasn't really used for anything important. Today, it certainly is. I also said that the .idata section is a read/write section, which has been found to be most untrue by people trying to do API interception today.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Along with a complete update of the PE format story in this article, I've also overhauled the PEDUMP program, which displays the contents of PE files. PEDUMP can be compiled and run on both the x86 and IA-64 platforms, and can dump both 32 and 64-bit PE files. Most importantly, full source code for PEDUMP is available for download fropm the link at the top of this article, so you have a working example of the concepts and data structures described here.<br><h3>Overview of the PE File Format</h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Microsoft introduced the PE File format, more commonly known as the PE format, as part of the original Win32 specifications. However, PE files are derived from the earlier Common Object File Format (COFF) found on VAX/VMS. This makes sense since much of the original Windows NT team came from Digital Equipment Corporation. It was natural for these developers to use existing code to quickly bootstrap the new Windows NT platform.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The term "Portable Executable" was chosen because the intent was to have a common file format for all flavors of Windows, on all supported CPUs. To a large extent, this goal has been achieved with the same format used on Windows NT and descendants, Windows 95 and descendants, and Windows CE.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OBJ files emitted by Microsoft compilers use the COFF format. You can get an idea of how old the COFF format is by looking at some of its fields, which use octal encoding! COFF OBJ files have many data structures and enumerations in common with PE files, and I'll mention some of them as I go along.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The addition of 64-bit Windows required just a few modifications to the PE format. This new format is called PE32+. No new fields were added, and only one field in the PE format was deleted. The remaining changes are simply the widening of certain fields from 32 bits to 64 bits. In most of these cases, you can write code that simply works with both 32 and 64-bit PE files. The Windows header files have the magic pixie dust to make the differences invisible to most C++-based code.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The distinction between EXE and DLL files is entirely one of semantics. They both use the exact same PE format. The only difference is a single bit that indicates if the file should be treated as an EXE or as a DLL. Even the DLL file extension is artificial. You can have DLLs with entirely different extensions—for instance .OCX controls and Control Panel applets (.CPL files) are DLLs.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A very handy aspect of PE files is that the data structures on disk are the same data structures used in memory. Loading an executable into memory (for example, by calling LoadLibrary) is primarily a matter of mapping certain ranges of a PE file into the address space. Thus, a data structure like the IMAGE_NT_HEADERS (which I'll examine later) is identical on disk and in memory. The key point is that if you know how to find something in a PE file, you can almost certainly find the same information when the file is loaded in memory.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It's important to note that PE files are not just mapped into memory as a single memory-mapped file. Instead, the Windows loader looks at the PE file and decides what portions of the file to map in. This mapping is consistent in that higher offsets in the file correspond to higher memory addresses when mapped into memory. The offset of an item in the disk file may differ from its offset once loaded into memory. However, all the information is present to allow you to make the translation from disk offset to memory offset (see <strong>Figure&nbsp;1</strong>).<br><br><img height="263" alt="Figure 1 Offsets" width="294" src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/Cc301805.pefig01(en-us,MSDN.10).gif"><br><strong>Figure 1</strong><strong>Offsets</strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;When PE files are loaded into memory via the Windows loader, the in-memory version is known as a module. The starting address where the file mapping begins is called an HMODULE. This is a point worth remembering: given an HMODULE, you know what data structure to expect at that address, and you can use that knowledge to find all the other data structures in memory. This powerful capability can be exploited for other purposes such as API interception. (To be completely accurate, an HMODULE isn't the same as the load address under Windows CE, but that's a story for yet another day.)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A module in memory represents all the code, data, and resources from an executable file that is needed by a process. Other parts of a PE file may be read, but not mapped in (for instance, relocations). Some parts may not be mapped in at all, for example, when debug information is placed at the end of the file. A field in the PE header tells the system how much memory needs to be set aside for mapping the executable into memory. Data that won't be mapped in is placed at the end of the file, past any parts that will be mapped in.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The central location where the PE format (as well as COFF files) is described is WINNT.H. Within this header file, you'll find nearly every structure definition, enumeration, and #define needed to work with PE files or the equivalent structures in memory. Sure, there is documentation elsewhere. MSDN has the "Microsoft Portable Executable and Common Object File Format Specification," for instance (see the October 2001 MSDN CD under Specifications). But WINNT.H is the final word on what PE files look like.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;There are many tools for examining PE files. Among them are Dumpbin from Visual Studio, and Depends from the Platform SDK. I particularly like Depends because it has a very succinct way of examining a file's imports and exports. A great free PE viewer is PEBrowse Professional, from Smidgeonsoft (<a id="ctl00_MTContentSelector1_mainContentContainer_ctl02" href="http://www.smidgeonsoft.com/" onclick="javascript:Track(&#39;ctl00_MTContentSelector1_mainContentContainer_ctl00|ctl00_MTContentSelector1_mainContentContainer_ctl02&#39;,this);">http://www.smidgeonsoft.com</a>). The PEDUMP program included with this article is also very comprehensive, and does almost everything Dumpbin does.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;From an API standpoint, the primary mechanism provided by Microsoft for reading and modifying PE files is IMAGEHLP.DLL.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Before I start looking at the specifics of PE files, it's worthwhile to first review a few basic concepts that thread their way through the entire subject of PE files. In the following sections, I will discuss PE file sections, relative virtual addresses (RVAs), the data directory, and how functions are imported.
<h3>PE File Sections</h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A PE file section represents code or data of some sort. While code is just code, there are multiple types of data. Besides read/write program data (such as global variables), other types of data in sections include API import and export tables, resources, and relocations. Each section has its own set of in-memory attributes, including whether the section contains code, whether it's read-only or read/write, and whether the data in the section is shared between all processes using the executable.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Generally speaking, all the code or data in a section is logically related in some way. At a minimum, there are usually at least two sections in a PE file: one for code, the other for data. Commonly, there's at least one other type of data section in a PE file. I'll look at the various kinds of sections in Part 2 of this article next month.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Each section has a distinct name. This name is intended to convey the purpose of the section. For example, a section called .rdata indicates a read-only data section. Section names are used solely for the benefit of humans, and are insignificant to the operating system. A section named FOOBAR is just as valid as a section called .text. Microsoft typically prefixes their section names with a period, but it's not a requirement. For years, the Borland linker used section names like CODE and DATA.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;While compilers have a standard set of sections that they generate, there's nothing magical about them. You can create and name your own sections, and the linker happily includes them in the executable. In Visual C++, you can tell the compiler to insert code or data into a section that you name with #pragma statements. For instance, the statement<pre><code>#pragma data_seg( "MY_DATA" )
</code></pre>causes all data emitted by Visual C++ to go into a section called MY_DATA, rather than the default .data section. Most programs are fine using the default sections emitted by the compiler, but occasionally you may have funky requirements which necessitate putting code or data into a separate section.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sections don't spring fully formed from the linker; rather, they start out in OBJ files, usually placed there by the compiler. The linker's job is to combine all the required sections from OBJ files and libraries into the appropriate final section in the PE file. For example, each OBJ file in your project probably has at least a .text section, which contains code. The linker takes all the sections named .text from the various OBJ files and combines them into a single .text section in the PE file. Likewise, all the sections named .data from the various OBJs are combined into a single .data section in the PE file. Code and data from .LIB files are also typically included in an executable, but that subject is outside the scope of this article.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;There is a rather complete set of rules that linkers follow to decide which sections to combine and how. I gave an introduction to the linker algorithms in the July 1997 <a id="ctl00_MTContentSelector1_mainContentContainer_ctl03" href="http://www.microsoft.com/msj/0797/hood0797.htm" onclick="javascript:Track(&#39;ctl00_MTContentSelector1_mainContentContainer_ctl00|ctl00_MTContentSelector1_mainContentContainer_ctl03&#39;,this);">Under The Hood</a> column in <em>MSJ</em>. A section in an OBJ file may be intended for the linker's use, and not make it into the final executable. A section like this would be intended for the compiler to pass information to the linker.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sections have two alignment values, one within the disk file and the other in memory. The PE file header specifies both of these values, which can differ. Each section starts at an offset that's some multiple of the alignment value. For instance, in the PE file, a typical alignment would be 0x200. Thus, every section begins at a file offset that's a multiple of 0x200.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Once mapped into memory, sections always start on at least a page boundary. That is, when a PE section is mapped into memory, the first byte of each section corresponds to a memory page. On x86 CPUs, pages are 4KB aligned, while on the IA-64, they're 8KB aligned. The following code shows a snippet of PEDUMP output for the .text and .data section of the Windows XP KERNEL32.DLL.<pre><code>Section Table
  01 .text     VirtSize: 00074658  VirtAddr:  00001000
    raw data offs:   00000400  raw data size: 00074800
•••
  02 .data     VirtSize: 000028CA  VirtAddr:  00076000
    raw data offs:   00074C00  raw data size: 00002400
</code></pre>The .text section is at offset 0x400 in the PE file and will be 0x1000 bytes above the load address of KERNEL32 in memory. Likewise, the .data section is at file offset 0x74C00 and will be 0x76000 bytes above KERNEL32's load address in memory.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It's possible to create PE files in which the sections start at the same offset in the file as they start from the load address in memory. This makes for larger executables, but can speed loading under Windows 9<em>x</em> or Windows Me. The default /OPT:WIN98 linker option (introduced in Visual Studio 6.0) causes PE files to be created this way. In Visual Studio® .NET, the linker may or may not use /OPT:NOWIN98, depending on whether the file is small enough.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An interesting linker feature is the ability to merge sections. If two sections have similar, compatible attributes, they can usually be combined into a single section at link time. This is done via the linker /merge switch. For instance, the following linker option combines the .rdata and .text sections into a single section called .text:<pre><code>/MERGE:.rdata=.text
</code></pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The advantage to merging sections is that it saves space, both on disk and in memory. At a minimum, each section occupies one page in memory. If you can reduce the number of sections in an executable from four to three, there's a decent chance you'll use one less page of memory. Of course, this depends on whether the unused space at the end of the two merged sections adds up to a page.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Things can get interesting when you're merging sections, as there are no hard and fast rules as to what's allowed. For example, it's OK to merge .rdata into .text, but you shouldn't merge .rsrc, .reloc, or .pdata into other sections. Prior to Visual Studio .NET, you could merge .idata into other sections. In Visual Studio .NET, this is not allowed, but the linker often merges parts of the .idata into other sections, such as .rdata, when doing a release build.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Since portions of the imports data are written to by the Windows loader when they are loaded into memory, you might wonder how they can be put in a read-only section. This situation works because at load time the system can temporarily set the attributes of the pages containing the imports data to read/write. Once the imports table is initialized, the pages are then set back to their original protection attributes.
<h3>Relative Virtual Addresses</h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;In an executable file, there are many places where an in-memory address needs to be specified. For instance, the address of a global variable is needed when referencing it. PE files can load just about anywhere in the process address space. While they do have a preferred load address, you can't rely on the executable file actually loading there. For this reason, it's important to have some way of specifying addresses that are independent of where the executable file loads.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;To avoid having hardcoded memory addresses in PE files, RVAs are used. An RVA is simply an offset in memory, relative to where the PE file was loaded. For instance, consider an EXE file loaded at address 0x400000, with its code section at address 0x401000. The RVA of the code section would be:<pre><code>(target address) 0x401000 - (load address)0x400000  = (RVA)0x1000.
</code></pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;To convert an RVA to an actual address, simply reverse the process: add the RVA to the actual load address to find the actual memory address. Incidentally, the actual memory address is called a Virtual Address (VA) in PE parlance. Another way to think of a VA is that it's an RVA with the preferred load address added in. Don't forget the earlier point I made that a load address is the same as the HMODULE.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Want to go spelunking through some arbitrary DLL's data structures in memory? Here's how. Call GetModuleHandle with the name of the DLL. The HMODULE that's returned is just a load address; you can apply your knowledge of the PE file structures to find anything you want within the module.
<h3>The Data Directory</h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;There are many data structures within executable files that need to be quickly located. Some obvious examples are the imports, exports, resources, and base relocations. All of these well-known data structures are found in a consistent manner, and the location is known as the DataDirectory.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The DataDirectory is an array of 16 structures. Each array entry has a predefined meaning for what it refers to. The IMAGE_DIRECTORY_ENTRY_ <em>xxx</em> #defines are array indexes into the DataDirectory (from 0 to 15). <a id="ctl00_MTContentSelector1_mainContentContainer_ctl04" href="http://msdn.microsoft.com/en-us/magazine/bb985997.aspx" onclick="javascript:Track(&#39;ctl00_MTContentSelector1_mainContentContainer_ctl00|ctl00_MTContentSelector1_mainContentContainer_ctl04&#39;,this);">Figure&nbsp;2</a> describes what each of the IMAGE_DATA_DIRECTORY_<em>xxx</em> values refers to. A more detailed description of many of the pointed-to data structures will be included in Part 2 of this article.
<h3>Importing Functions</h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;When you use code or data from another DLL, you're importing it. When any PE file loads, one of the jobs of the Windows loader is to locate all the imported functions and data and make those addresses available to the file being loaded. I'll save the detailed discussion of data structures used to accomplish this for Part 2 of this article, but it's worth going over the concepts here at a high level.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;When you link directly against the code and data of another DLL, you're implicitly linking against the DLL. You don't have to do anything to make the addresses of the imported APIs available to your code. The loader takes care of it all. The alternative is explicit linking. This means explicitly making sure that the target DLL is loaded and then looking up the address of the APIs. This is almost always done via the LoadLibrary and GetProcAddress APIs.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;When you implicitly link against an API, LoadLibrary and GetProcAddress-like code still executes, but the loader does it for you automatically. The loader also ensures that any additional DLLs needed by the PE file being loaded are also loaded. For instance, every normal program created with Visual C++® links against KERNEL32.DLL. KERNEL32.DLL in turn imports functions from NTDLL.DLL. Likewise, if you import from GDI32.DLL, it will have dependencies on the USER32, ADVAPI32, NTDLL, and KERNEL32 DLLs, which the loader makes sure are loaded and all imports resolved. (Visual Basic 6.0 and the Microsoft .NET executables directly link against a different DLL than KERNEL32, but the same principles apply.)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;When implicitly linking, the resolution process for the main EXE file and all its dependent DLLs occurs when the program first starts. If there are any problems (for example, a referenced DLL that can't be found), the process is aborted.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Visual C++ 6.0 added the delayload feature, which is a hybrid between implicit linking and explicit linking. When you delayload against a DLL, the linker emits something that looks very similar to the data for a regular imported DLL. However, the operating system ignores this data. Instead, the first time a call to one of the delayloaded APIs occurs, special stubs added by the linker cause the DLL to be loaded (if it's not already in memory), followed by a call to GetProcAddress to locate the called API. Additional magic makes it so that subsequent calls to the API are just as efficient as if the API had been imported normally.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Within a PE file, there's an array of data structures, one per imported DLL. Each of these structures gives the name of the imported DLL and points to an array of function pointers. The array of function pointers is known as the import address table (IAT). Each imported API has its own reserved spot in the IAT where the address of the imported function is written by the Windows loader. This last point is particularly important: once a module is loaded, the IAT contains the address that is invoked when calling imported APIs.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The beauty of the IAT is that there's just one place in a PE file where an imported API's address is stored. No matter how many source files you scatter calls to a given API through, all the calls go through the same function pointer in the IAT.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Let's examine what the call to an imported API looks like. There are two cases to consider: the efficient way and inefficient way. In the best case, a call to an imported API looks like this:<pre><code>CALL DWORD PTR [0x00405030]
</code></pre>If you're not familiar with x86 assembly language, this is a call through a function pointer. Whatever DWORD-sized value is at 0x405030 is where the CALL instruction will send control. In the previous example, address 0x405030 lies within the IAT.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The less efficient call to an imported API looks like this:<pre><code>CALL 0x0040100C
•••
0x0040100C:
JMP       DWORD PTR [0x00405030]
</code></pre>In this situation, the CALL transfers control to a small stub. The stub is a JMP to the address whose value is at 0x405030. Again, remember that 0x405030 is an entry within the IAT. In a nutshell, the less efficient imported API call uses five bytes of additional code, and takes longer to execute because of the extra JMP.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;You're probably wondering why the less efficient method would ever be used. There's a good explanation. Left to its own devices, the compiler can't distinguish between imported API calls and ordinary functions within the same module. As such, the compiler emits a CALL instruction of the form<pre><code>CALL XXXXXXXX
</code></pre>where <em>XXXXXXXX</em> is an actual code address that will be filled in by the linker later. Note that this last CALL instruction isn't through a function pointer. Rather, it's an actual code address. To keep the cosmic karma in balance, the linker needs to have a chunk of code to substitute for <em>XXXXXXXX</em>. The simplest way to do this is to make the call point to a JMP stub, like you just saw.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Where does the JMP stub come from? Surprisingly, it comes from the import library for the imported function. If you were to examine an import library, and examine the code associated with the imported API name, you'd see that it's a JMP stub like the one just shown. What this means is that by default, in the absence of any intervention, imported API calls will use the less efficient form.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logically, the next question to ask is how to get the optimized form. The answer comes in the form of a hint you give to the compiler. The __declspec(dllimport) function modifier tells the compiler that the function resides in another DLL and that the compiler should generate this instruction<pre><code>CALL DWORD PTR [XXXXXXXX]
</code></pre>rather than this one:<pre><code>CALL XXXXXXXX
</code></pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;In addition, the compiler emits information telling the linker to resolve the function pointer portion of the instruction to a symbol named __imp_functionname. For instance, if you were calling MyFunction, the symbol name would be __imp_MyFunction. Looking in an import library, you'll see that in addition to the regular symbol name, there's also a symbol with the __imp__ prefix on it. This __imp__ symbol resolves directly to the IAT entry, rather than to the JMP stub.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;So what does this mean in your everyday life? If you're writing exported functions and providing a .H file for them, remember to use the __declspec(dllimport) modifier with the function:<pre><code>__declspec(dllimport) void Foo(void);
</code></pre>If you look at the Windows system header files, you'll find that they use __declspec(dllimport) for the Windows APIs. It's not easy to see this, but if you search for the DECLSPEC_IMPORT macro defined in WINNT.H, and which is used in files such as WinBase.H, you'll see how __declspec(dllimport) is prepended to the system API declarations.
<h3>PE File Structure</h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Now let's dig into the actual format of PE files. I'll start from the beginning of the file, and describe the data structures that are present in every PE file. Afterwards, I'll describe the more specialized data structures (such as imports or resources) that reside within a PE's sections. All of the data structures that I'll discuss below are defined in WINNT.H, unless otherwise noted.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;In many cases, there are matching 32 and 64-bit data structures—for example, IMAGE_NT_HEADERS32 and IMAGE_NT_HEADERS64. These structures are almost always identical, except for some widened fields in the 64-bit versions. If you're trying to write portable code, there are #defines in WINNT.H which select the appropriate 32 or 64-bit structures and alias them to a size-agnostic name (in the previous example, it would be IMAGE_NT_HEADERS). The structure selected depends on which mode you're compiling for (specifically, whether _WIN64 is defined or not). You should only need to use the 32 or 64-bit specific versions of the structures if you're working with a PE file with size characteristics that are different from those of the platform you're compiling for.
<h3>The MS-DOS Header</h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Every PE file begins with a small MS-DOS® executable. The need for this stub executable arose in the early days of Windows, before a significant number of consumers were running it. When executed on a machine without Windows, the program could at least print out a message saying that Windows was required to run the executable.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The first bytes of a PE file begin with the traditional MS-DOS header, called an IMAGE_DOS_HEADER. The only two values of any importance are e_magic and e_lfanew. The e_lfanew field contains the file offset of the PE header. The e_magic field (a WORD) needs to be set to the value 0x5A4D. There's a #define for this value, named IMAGE_DOS_SIGNATURE. In ASCII representation, 0x5A4D is MZ, the initials of Mark Zbikowski, one of the original architects of MS-DOS.
<h3>The IMAGE_NT_HEADERS Header</h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The IMAGE_NT_HEADERS structure is the primary location where specifics of the PE file are stored. Its offset is given by the e_lfanew field in the IMAGE_DOS_HEADER at the beginning of the file. There are actually two versions of the IMAGE_NT_HEADER structure, one for 32-bit executables and the other for 64-bit versions. The differences are so minor that I'll consider them to be the same for the purposes of this discussion. The only correct, Microsoft-approved way of differentiating between the two formats is via the value of the Magic field in the IMAGE_OPTIONAL_HEADER (described shortly).<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An IMAGE_NT_HEADER is comprised of three fields:<pre><code>typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;
</code></pre>In a valid PE file, the Signature field is set to the value 0x00004550, which in ASCII is "PE00". A #define, IMAGE_NT_SIGNATURE, is defined for this value. The second field, a struct of type IMAGE_FILE_HEADER, predates PE files. It contains some basic information about the file; most importantly, a field describing the size of the optional data that follows it. In PE files, this optional data is very much required, but is still called the IMAGE_OPTIONAL_HEADER.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a id="ctl00_MTContentSelector1_mainContentContainer_ctl05" href="http://msdn.microsoft.com/en-us/magazine/bb985997.aspx" onclick="javascript:Track(&#39;ctl00_MTContentSelector1_mainContentContainer_ctl00|ctl00_MTContentSelector1_mainContentContainer_ctl05&#39;,this);">Figure&nbsp;3</a> shows the fields of the IMAGE_FILE_HEADER structure, with additional notes for the fields. This structure can also be found at the very beginning of COFF OBJ files. <a id="ctl00_MTContentSelector1_mainContentContainer_ctl06" href="http://msdn.microsoft.com/en-us/magazine/bb985997.aspx" onclick="javascript:Track(&#39;ctl00_MTContentSelector1_mainContentContainer_ctl00|ctl00_MTContentSelector1_mainContentContainer_ctl06&#39;,this);">Figure&nbsp;4</a> lists the common values of IMAGE_FILE_<em>xxx</em>. <a id="ctl00_MTContentSelector1_mainContentContainer_ctl07" href="http://msdn.microsoft.com/en-us/magazine/bb985997.aspx" onclick="javascript:Track(&#39;ctl00_MTContentSelector1_mainContentContainer_ctl00|ctl00_MTContentSelector1_mainContentContainer_ctl07&#39;,this);">Figure&nbsp;5</a> shows the members of the IMAGE_OPTIONAL_HEADER structure.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The DataDirectory array at the end of the IMAGE_OPTIONAL_HEADERs is the address book for important locations within the executable. Each DataDirectory entry looks like this:<pre><code>typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD   VirtualAddress;     // RVA of the data
    DWORD   Size;               // Size of the data
};
</code></pre><h3>The Section Table</h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Immediately following the IMAGE_NT_HEADERS is the section table. The section table is an array of IMAGE_SECTION_HEADERs structures. An IMAGE_SECTION_HEADER provides information about its associated section, including location, length, and characteristics. <a id="ctl00_MTContentSelector1_mainContentContainer_ctl08" href="http://msdn.microsoft.com/en-us/magazine/bb985997.aspx" onclick="javascript:Track(&#39;ctl00_MTContentSelector1_mainContentContainer_ctl00|ctl00_MTContentSelector1_mainContentContainer_ctl08&#39;,this);">Figure&nbsp;6</a> contains a description of the IMAGE_SECTION_HEADER fields. The number of IMAGE_SECTION_HEADER structures is given by the IMAGE_NT_HEADERS.FileHeader.NumberOfSections field.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The file alignment of sections in the executable file can have a significant impact on the resulting file size. In Visual Studio 6.0, the linker defaulted to a section alignment of 4KB, unless /OPT:NOWIN98 or the /ALIGN switch was used. The Visual Studio .NET linker, while still defaulting to /OPT:WIN98, determines if the executable is below a certain size and if that is the case uses 0x200-byte alignment.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Another interesting alignment comes from the .NET file specification. It says that .NET executables should have an in-memory alignment of 8KB, rather than the expected 4KB for x86 binaries. This is to ensure that .NET executables built with x86 entry point code can still run under IA-64. If the in-memory section alignment were 4KB, the IA-64 loader wouldn't be able to load the file, since pages are 8KB on 64-bit Windows.
<h3>Wrap-up</h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;That's it for the headers of PE files. In Part 2 of this article I'll continue the tour of portable executable files by looking at commonly encountered sections. Then I'll describe the major data structures within those sections, including imports, exports, and resources. And finally, I'll go over the source for the updated and vastly improved PEDUMP.<br></td>
                                        </tr>
                                        <tr>
                                                  <td>
                                                            <strong>For related articles see:</strong>
                                                            <br>
                                                            <a id="ctl00_MTContentSelector1_mainContentContainer_ctl09" href="http://msdn.microsoft.com/en-us/magazine/ms809762.aspx" onclick="javascript:Track(&#39;ctl00_MTContentSelector1_mainContentContainer_ctl00|ctl00_MTContentSelector1_mainContentContainer_ctl09&#39;,this);">Peering Inside the PE: A Tour of the Win32 Portable Executable File Format</a>
                                                            <p>
                                                            <strong>For background information see:</strong>
                                                            <br>
                                                            <a id="ctl00_MTContentSelector1_mainContentContainer_ctl10" href="http://support.microsoft.com/default.aspx?scid=kb;en-us;q121460" onclick="javascript:Track(&#39;ctl00_MTContentSelector1_mainContentContainer_ctl00|ctl00_MTContentSelector1_mainContentContainer_ctl10&#39;,this);">The Common Object File Format (COFF)</a>
                                                            </p><p>
                                                  </p></td>
                                        </tr>
                                        <tr>
                                                  <td>
                                                            <em>
                                                                      <strong>Matt Pietrek</strong> is an independent writer, consultant, and trainer. He was the lead architect for Compuware/NuMega's Bounds Checker product line for eight years and has authored three books on Windows system programming. His Web site, at <a id="ctl00_MTContentSelector1_mainContentContainer_ctl11" href="http://www.wheaty.net/" onclick="javascript:Track(&#39;ctl00_MTContentSelector1_mainContentContainer_ctl00|ctl00_MTContentSelector1_mainContentContainer_ctl11&#39;,this);">http://www.wheaty.net</a>, has a FAQ page and information on previous columns and articles.</em>
                                                            <br>
                                                  </td>
                                        </tr>
                              </tbody></table>
                              <p>
                              </p><div>
                                        <!---->
                              </div>
                    </div>
                                                        
                                                </div>
                                                <div class="FeatureSmallHeadWithLogo">&nbsp;</div>
                                            </td>
                                            <td style="width: 303px; vertical-align: top; padding-left: 3px;" valign="top">
                                                <div id="RightContent">
                                                    <div id="ctl00_RightSideBox">
	<p:primary pcat:primaryformat="Mtps.Xhtml" xmlns:asp="http://msdn2.microsoft.com/aspnet" xmlns:pcat="urn:mtpg-com:mtps/2004/1/primary/category" xmlns:p="urn:mtpg-com:mtps/2004/1/primary"><div class="navpage"><div style="margin-bottom:10px;"><iframe frameborder="0" framespacing="0" height="250" id="4f2320cbb2378" name="4f2320cbb2378" scrolling="no" src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/afr(1).htm" width="300">&lt;a id="ctl00_ctl12" href="http://ox-d.101m3.com/w/1.0/rc?cs=4f2320cbb2378&amp;cb=INSERT_RANDOM_NUMBER_HERE" onclick="javascript:Track('ctl00_ctl11|ctl00_ctl12',this);"&gt;&lt;img alt="" border="0" src="http://ox-d.101m3.com/w/1.0/ai?auid=139281&amp;amp;cs=4f2320cbb2378&amp;amp;cb=INSERT_RANDOM_NUMBER_HERE" /&gt;&lt;/a&gt;</iframe></div><div style="margin-bottom:10px;"><iframe frameborder="0" framespacing="0" height="250" id="4f2320971b57d" name="4f2320971b57d" scrolling="no" src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/afr.htm" width="300">&lt;a id="ctl00_ctl13" href="http://ox-d.101m3.com/w/1.0/rc?cs=4f2320971b57d&amp;cb=INSERT_RANDOM_NUMBER_HERE" onclick="javascript:Track('ctl00_ctl11|ctl00_ctl13',this);"&gt;&lt;img alt="" border="0" src="http://ox-d.101m3.com/w/1.0/ai?auid=139280&amp;amp;cs=4f2320971b57d&amp;amp;cb=INSERT_RANDOM_NUMBER_HERE" /&gt;&lt;/a&gt;</iframe></div><div style="border-width:5px;border-color:black;border-style:solid;"><div style="margin-left:5px; margin-right:5px;"><h3><a id="ctl00_ctl14" href="http://blogs.msdn.com/msdnmagazine/" onclick="javascript:Track(&#39;ctl00_ctl11|ctl00_ctl14&#39;,this);">MSDN Magazine Blog</a></h3><p><!-- RSSURL : http://blogs.msdn.com/msdnmagazine/rss.xml | RSS GUID : 44CFFA5F-CCC2-14A2-2403-529DE793E787 --></p><div id="ctl00_ctl15_MtpsFeedViewerBasicPanelWebSlice" class="hslice">
		
	<p id="ctl00_ctl15_titlediv" class="entry-title"></p>
	<div class="entry-content">
			
		<div id="ctl00_ctl15_MtpsFeedViewerBasicPanel" class="MtpsFeedViewerBasicRootPanelClass">
				
			<div id="ctl00_ctl15_MtpsFeedViewerBasicHeaderPanel" class="MtpsFeedViewerBasicHeaderStylePanel">
					
			
				</div>
		<div class="ColumnDiv">
					<div id="ctl00_ctl15_ctl02" class="BasicHeadlinesItemPanelCssClass" style="width:99%;">
						<a id="ctl00_ctl15_ctl03" title="VB6: David Platt’s Inside Pitch" class="BasicHeadlinesTitleBold" href="http://blogs.msdn.com/b/msdnmagazine/archive/2014/06/05/10531518.aspx" onclick="javascript:Track(&#39;ctl00_ctl15_ctl02|ctl00_ctl15_ctl03&#39;,this);">VB6: David Platt’s Inside Pitch</a><br><span class="BasicHeadlinesDescLabelCssClass">David Platt has been writing the back page Don’t Get Me Started column at MSDN Magazine for going on five years now. The author of “Why Software Sucks... </span><a id="ctl00_ctl15_ctl06" title="VB6: David Platt’s Inside Pitch" href="http://blogs.msdn.com/b/msdnmagazine/archive/2014/06/05/10531518.aspx" onclick="javascript:Track(&#39;ctl00_ctl15_ctl02|ctl00_ctl15_ctl06&#39;,this);">More...</a><br><span class="FVBPubDateLabel">Thursday, Jun 5</span>
					</div>
				</div><div class="ColumnDiv">
					<div id="ctl00_ctl15_ctl10" class="BasicHeadlinesItemPanelCssClass" style="width:99%;">
						<a id="ctl00_ctl15_ctl11" title="Check Out the May Issue of MSDN Magazine" class="BasicHeadlinesTitleBold" href="http://blogs.msdn.com/b/msdnmagazine/archive/2014/05/02/10522253.aspx" onclick="javascript:Track(&#39;ctl00_ctl15_ctl10|ctl00_ctl15_ctl11&#39;,this);">Check Out the May Issue of MSDN Magazine</a><br><span class="BasicHeadlinesDescLabelCssClass">Be sure to check out the May issue of MSDN Magazine, which spotlights some of the powerful new capabilities highlighted at the Microsoft Build Confere... </span><a id="ctl00_ctl15_ctl14" title="Check Out the May Issue of MSDN Magazine" href="http://blogs.msdn.com/b/msdnmagazine/archive/2014/05/02/10522253.aspx" onclick="javascript:Track(&#39;ctl00_ctl15_ctl10|ctl00_ctl15_ctl14&#39;,this);">More...</a><br><span class="FVBPubDateLabel">Friday, May 2</span>
					</div>
				</div><div class="EmptyPanel">

				</div>
			</div>
	
		</div>

	</div><p></p><p><a id="ctl00_ctl16" href="http://blogs.msdn.com/msdnmagazine/" onclick="javascript:Track(&#39;ctl00_ctl11|ctl00_ctl16&#39;,this);">More MSDN Magazine Blog entries &gt;</a></p></div><div style="margin-left:5px; margin-right:5px; background-color:#5b6871;height:12px"><!--PublishThis!: An empty tag was encountered. This comment was inserted to prevent a self-closing tag.--></div><div style="margin-left:5px; margin-right:5px;"><p><br></p><div style="text-align:left;font-family:Segoe UI;font-size:12pt;">Current Issue</div><div style="text-align:center;display:block;height:260px"><p><a id="ctl00_ctl17" href="http://msdn.microsoft.com/en-us/magazine/dn745857.aspx" onclick="javascript:Track(&#39;ctl00_ctl11|ctl00_ctl17&#39;,this);"><br><img align="Middle" alt="June 2014" height="239" src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/dn745857.cover_lrg(en-us,MSDN.10).jpg" title="June 2014" width="179"></a></p></div><div style="text-align:right;"><p><a id="ctl00_ctl18" href="http://msdn.microsoft.com/en-us/magazine/ee310108.aspx" onclick="javascript:Track(&#39;ctl00_ctl11|ctl00_ctl18&#39;,this);">Browse All MSDN Magazines</a><br></p></div><div style="background-color:#5b6871;height:12px"><!--PublishThis!: An empty tag was encountered. This comment was inserted to prevent a self-closing tag.--></div></div><div style="margin-left:5px; margin-right:5px;"><div style="text-align:Right;font-family:Segoe UI;font-size:12pt;"><p><br><a id="ctl00_ctl19" href="http://msdn.microsoft.com/en-US/aa570311.aspx?ocid=msdn_magazine" onclick="javascript:Track(&#39;ctl00_ctl11|ctl00_ctl19&#39;,this);"><img align="Left" alt="Subscribe to the MSDN Flash newsletter" src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/dd799403.Question_opt(en-us,MSDN.10).png" title="Subscribe to the MSDN Flash newsletter"> Subscribe to MSDN Flash newsletter</a></p></div><div style="text-align:left;"><p><br>Receive the MSDN Flash e-mail newsletter every other week, with news and information personalized to your interests and areas of focus.</p></div></div></div></div></p:primary>
</div>
                                                </div>
                                            </td>
                                        </tr>
                                    </tbody></table>
                                    <div id="ctl00_FooterAd" class="MsdnPage_ContentInclude" align="center"><div>
	<div>
		<div class="navpage"><p>&nbsp;</p><div><iframe frameborder="0" framespacing="0" height="90" id="4f2320f8e860a" name="4f2320f8e860a" scrolling="no" src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/afr(2).htm" width="728">&lt;a id="ctl00_ctl28" href="http://ox-d.101m3.com/w/1.0/rc?cs=4f2320f8e860a&amp;cb=INSERT_RANDOM_NUMBER_HERE" onclick="javascript:Track('ctl00_ctl27|ctl00_ctl28',this);"&gt;&lt;img alt="" border="0" src="http://ox-d.101m3.com/w/1.0/ai?auid=139282&amp;amp;cs=4f2320f8e860a&amp;amp;cb=INSERT_RANDOM_NUMBER_HERE" /&gt;&lt;/a&gt;</iframe></div></div>
	</div>
</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="Clearbottom"> </div>
                        <div class="bottomleftcorner"> </div>
                        <div class="bottomrightcorner"> </div>
                        <div id="Footer">
                            

<div class="FooterLinks">
    <div id="ctl00_Footer1_SiteLinks">

</div>
    <span id="ctl00_Footer1_Copyright" title="© 2014  Microsoft. All rights reserved." class="FooterCopyright">© 2014  Microsoft. All rights reserved.</span>
    <a id="ctl00_Footer1_Terms" title="Terms of Use" href="http://msdn.microsoft.com/cc300389.aspx">Terms of Use</a>
    <span class="Pipe">|</span>
    <a id="ctl00_Footer1_Trademarks" title="Trademarks" href="http://www.microsoft.com/library/toolbar/3.0/trademarks/en-us.mspx">Trademarks</a>
    <span class="Pipe">|</span>
    <a id="ctl00_Footer1_PrivacyStatement" title="Privacy Statement" href="http://www.microsoft.com/info/privacy.mspx">Privacy Statement</a>
    <span id="ctl00_Footer1_PipeSpan3" class="Pipe">|</span>
    <a id="ctl00_Footer1_Feedback" title="Site Feedback" rel="sitefeedback" targeturl="https://lab.msdn.microsoft.com/mailform/contactus.aspx?refurl=http://msdn.microsoft.com/en-us/magazine/cc301805.aspx&amp;loc=en-us" href="https://lab.msdn.microsoft.com/mailform/contactus.aspx?refurl=http://msdn.microsoft.com/en-us/magazine/cc301805.aspx&loc=en-us" target="_blank">Site Feedback</a>
</div>

                        </div>
                    
                </div>
            </div>
        </div>
    </div>
    <div style="display:none"><img src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/trans_pixel.asp" width="0" height="0" hspace="0" vspace="0" border="0" alt="Page view tracker"></div>
    
<script src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/webtrendsscript-bn1651.js" type="text/javascript"></script>
<noscript>
&lt;div&gt;&lt;img alt="DCSIMG" id="Img1" width="1" height="1" src="http://m.webtrends.com/dcsmgru7m99k7mqmgrhudo0k8_8c6m/njs.gif?dcsuri=/nojavascript&amp;amp;WT.js=No" /&gt;&lt;/div&gt;
</noscript>
    <script type="text/javascript" src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/mtps-bn1651.js"></script>
    

<script type="text/javascript">
//<![CDATA[
 RegisterAutoSubmit('ctl00_tb1_Flyout_Rating1','ctl00_tb1_Flyout_btnSend','contentRatingcc301805MSDN.10en-us');

//]]>
</script>
</form>


<script language="javascript" type="text/javascript" src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/broker.js"></script>

<script src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/broker-config.js"></script><div id="_WEDCSInsertedData" style="display: none;"><iframe id="_msnFrame" src="./Inside Windows  An In-Depth Look into the Win32 Portable Executable File Format_files/c.gif" style="z-index:-1;height:1px;width:1px;display:none;visibility:hidden;" onload="javascript:MscomBeacon();"></iframe></div></body></html>